// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bungalowparadise_api.DbContext;

#nullable disable

namespace bungalowparadise_api.Migrations
{
    [DbContext(typeof(HotelDbContext))]
    [Migration("20250315214207_UpdateDataSampleSeeding")]
    partial class UpdateDataSampleSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ReservationRoom", b =>
                {
                    b.Property<int>("ReservationsId")
                        .HasColumnType("int");

                    b.Property<int>("RoomsId")
                        .HasColumnType("int");

                    b.HasKey("ReservationsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("ReservationRoom");

                    b.HasData(
                        new
                        {
                            ReservationsId = 1,
                            RoomsId = 1
                        },
                        new
                        {
                            ReservationsId = 1,
                            RoomsId = 2
                        },
                        new
                        {
                            ReservationsId = 2,
                            RoomsId = 2
                        },
                        new
                        {
                            ReservationsId = 3,
                            RoomsId = 4
                        },
                        new
                        {
                            ReservationsId = 4,
                            RoomsId = 6
                        },
                        new
                        {
                            ReservationsId = 4,
                            RoomsId = 10
                        },
                        new
                        {
                            ReservationsId = 5,
                            RoomsId = 5
                        },
                        new
                        {
                            ReservationsId = 6,
                            RoomsId = 9
                        },
                        new
                        {
                            ReservationsId = 6,
                            RoomsId = 12
                        });
                });

            modelBuilder.Entity("bungalowparadise_api.Models.CardDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardCode")
                        .HasColumnType("int");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("CardNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CardDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardCode = 123,
                            CardHolderName = "John Doe",
                            CardNumber = 1234567812345678L,
                            ExpiredDate = new DateTime(2027, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7226),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CardCode = 456,
                            CardHolderName = "Jane Smith",
                            CardNumber = 8765432187654321L,
                            ExpiredDate = new DateTime(2028, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7235),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CardCode = 789,
                            CardHolderName = "Lucía Gómez",
                            CardNumber = 4321432143214321L,
                            ExpiredDate = new DateTime(2029, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7236),
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            CardCode = 321,
                            CardHolderName = "Carlos Ramírez",
                            CardNumber = 5678567856785678L,
                            ExpiredDate = new DateTime(2026, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7238),
                            UserId = 5
                        });
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("Unread");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7259),
                            Message = "Welcome to our service!",
                            ReservationId = 1,
                            Status = "Unread"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7261),
                            Message = "Your reservation has been confirmed!",
                            ReservationId = 2,
                            Status = "Unread"
                        });
                });

            modelBuilder.Entity("bungalowparadise_api.Models.PasswordReset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ResetToken")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResetToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpiresAt = new DateTime(2025, 3, 15, 23, 42, 6, 627, DateTimeKind.Utc).AddTicks(7280),
                            ResetToken = "abcd1234",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ExpiresAt = new DateTime(2025, 3, 15, 23, 42, 6, 627, DateTimeKind.Utc).AddTicks(7284),
                            ResetToken = "efgh5678",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("Pending");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 200.5,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7383),
                            PaymentMethod = "Credit Card",
                            PaymentStatus = "Completed",
                            ReservationId = 1,
                            TransactionId = "TX123456"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 350.75,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7384),
                            PaymentMethod = "PayPal",
                            PaymentStatus = "Pending",
                            ReservationId = 2,
                            TransactionId = "TX789012"
                        });
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfKids")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("Pending");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheckIn = new DateTime(2025, 3, 16, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7351),
                            CheckOut = new DateTime(2025, 3, 18, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7353),
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7355),
                            NumberOfAdults = 2,
                            NumberOfGuests = 2,
                            NumberOfKids = 0,
                            Status = "Confirmed",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CheckIn = new DateTime(2025, 3, 20, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7356),
                            CheckOut = new DateTime(2025, 3, 23, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7357),
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7357),
                            NumberOfAdults = 2,
                            NumberOfGuests = 3,
                            NumberOfKids = 1,
                            Status = "Confirmed",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CheckIn = new DateTime(2025, 3, 17, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7358),
                            CheckOut = new DateTime(2025, 3, 19, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7359),
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7359),
                            NumberOfAdults = 1,
                            NumberOfGuests = 1,
                            NumberOfKids = 0,
                            Status = "Confirmed",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            CheckIn = new DateTime(2025, 3, 25, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7360),
                            CheckOut = new DateTime(2025, 3, 30, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7361),
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7361),
                            NumberOfAdults = 2,
                            NumberOfGuests = 4,
                            NumberOfKids = 2,
                            Status = "Cancelled",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            CheckIn = new DateTime(2025, 3, 22, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7362),
                            CheckOut = new DateTime(2025, 3, 24, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7362),
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7363),
                            NumberOfAdults = 1,
                            NumberOfGuests = 2,
                            NumberOfKids = 1,
                            Status = "Confirmed",
                            UserId = 6
                        },
                        new
                        {
                            Id = 6,
                            CheckIn = new DateTime(2025, 3, 18, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7364),
                            CheckOut = new DateTime(2025, 3, 21, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7364),
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7364),
                            NumberOfAdults = 2,
                            NumberOfGuests = 2,
                            NumberOfKids = 0,
                            Status = "Confirmed",
                            UserId = 7
                        });
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "¡Experiencia increíble!",
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7400),
                            Rating = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comment = "¡Estancia muy cómoda!",
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7401),
                            Rating = 4,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Buena atención, pero la habitación era algo ruidosa.",
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7402),
                            Rating = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Excelente servicio y vista espectacular.",
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7403),
                            Rating = 5,
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            Comment = "No cumplió mis expectativas, había problemas con la limpieza.",
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7404),
                            Rating = 2,
                            UserId = 6
                        });
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Beds")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GuestsPerRoom")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("Available");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id");

                    b.HasIndex("RoomNumber")
                        .IsUnique();

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bathrooms = 1,
                            Beds = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7306),
                            Description = "Acogedora habitación individual",
                            GuestsPerRoom = 1,
                            ImageUrl = "/placeholder.svg",
                            Name = "Deluxe Ocean View",
                            Price = 100.0,
                            RoomNumber = "101",
                            Status = "Available",
                            Type = "Single",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7306)
                        },
                        new
                        {
                            Id = 2,
                            Bathrooms = 1,
                            Beds = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7308),
                            Description = "Amplia habitación doble",
                            GuestsPerRoom = 2,
                            ImageUrl = "/placeholder.svg",
                            Name = "Premium Garden Suite",
                            Price = 150.0,
                            RoomNumber = "102",
                            Status = "Available",
                            Type = "Double",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7309)
                        },
                        new
                        {
                            Id = 3,
                            Bathrooms = 2,
                            Beds = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7310),
                            Description = "Suite de lujo con vista al mar",
                            GuestsPerRoom = 2,
                            ImageUrl = "/placeholder.svg",
                            Name = "Executive Ocean Suite",
                            Price = 250.0,
                            RoomNumber = "103",
                            Status = "Available",
                            Type = "Suite",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7311)
                        },
                        new
                        {
                            Id = 4,
                            Bathrooms = 1,
                            Beds = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7312),
                            Description = "Habitación individual económica",
                            GuestsPerRoom = 1,
                            ImageUrl = "/placeholder.svg",
                            Name = "Budget Single",
                            Price = 90.0,
                            RoomNumber = "104",
                            Status = "Occupied",
                            Type = "Single",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7313)
                        },
                        new
                        {
                            Id = 5,
                            Bathrooms = 1,
                            Beds = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7314),
                            Description = "Habitación doble moderna con balcón",
                            GuestsPerRoom = 2,
                            ImageUrl = "/placeholder.svg",
                            Name = "City View Deluxe",
                            Price = 160.0,
                            RoomNumber = "105",
                            Status = "Available",
                            Type = "Double",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7314)
                        },
                        new
                        {
                            Id = 6,
                            Bathrooms = 2,
                            Beds = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7316),
                            Description = "Gran suite con jacuzzi privado",
                            GuestsPerRoom = 2,
                            ImageUrl = "/placeholder.svg",
                            Name = "Presidential Suite",
                            Price = 300.0,
                            RoomNumber = "106",
                            Status = "Available",
                            Type = "Suite",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7316)
                        },
                        new
                        {
                            Id = 7,
                            Bathrooms = 1,
                            Beds = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7318),
                            Description = "Cómoda habitación doble con escritorio",
                            GuestsPerRoom = 2,
                            ImageUrl = "/placeholder.svg",
                            Name = "Business Room",
                            Price = 140.0,
                            RoomNumber = "107",
                            Status = "Under Maintenance",
                            Type = "Double",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7318)
                        },
                        new
                        {
                            Id = 8,
                            Bathrooms = 1,
                            Beds = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7320),
                            Description = "Tranquila habitación individual cerca del jardín",
                            GuestsPerRoom = 1,
                            ImageUrl = "/placeholder.svg",
                            Name = "Garden Nook",
                            Price = 95.0,
                            RoomNumber = "108",
                            Status = "Available",
                            Type = "Single",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7320)
                        },
                        new
                        {
                            Id = 9,
                            Bathrooms = 1,
                            Beds = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7321),
                            Description = "Habitación doble con vista parcial al mar",
                            GuestsPerRoom = 2,
                            ImageUrl = "/placeholder.svg",
                            Name = "Sunset Double",
                            Price = 170.0,
                            RoomNumber = "109",
                            Status = "Available",
                            Type = "Double",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7322)
                        },
                        new
                        {
                            Id = 10,
                            Bathrooms = 2,
                            Beds = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7323),
                            Description = "Suite de lujo con cocina incluida",
                            GuestsPerRoom = 4,
                            ImageUrl = "/placeholder.svg",
                            Name = "Family Suite",
                            Price = 280.0,
                            RoomNumber = "110",
                            Status = "Occupied",
                            Type = "Suite",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7323)
                        },
                        new
                        {
                            Id = 11,
                            Bathrooms = 1,
                            Beds = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7325),
                            Description = "Habitación individual ideal para viajeros",
                            GuestsPerRoom = 1,
                            ImageUrl = "/placeholder.svg",
                            Name = "Traveler's Spot",
                            Price = 105.0,
                            RoomNumber = "111",
                            Status = "Available",
                            Type = "Single",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7325)
                        },
                        new
                        {
                            Id = 12,
                            Bathrooms = 1,
                            Beds = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7326),
                            Description = "Habitación doble con cama tamaño king",
                            GuestsPerRoom = 2,
                            ImageUrl = "/placeholder.svg",
                            Name = "King Double Room",
                            Price = 155.0,
                            RoomNumber = "112",
                            Status = "Available",
                            Type = "Double",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7327)
                        });
                });

            modelBuilder.Entity("bungalowparadise_api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("User");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7068),
                            Email = "john@example.com",
                            LastName = "Doe",
                            Name = "John",
                            PasswordHash = "hashedpassword",
                            Phone = "1234567890",
                            Role = "User",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7070)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7071),
                            Email = "jane@example.com",
                            LastName = "Smith",
                            Name = "Jane",
                            PasswordHash = "hashedpassword",
                            Phone = "9876543210",
                            Role = "User",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7072)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7073),
                            Email = "michael@example.com",
                            LastName = "Johnson",
                            Name = "Michael",
                            PasswordHash = "hashedpassword",
                            Phone = "5556667777",
                            Role = "User",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7074)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7075),
                            Email = "lucia@example.com",
                            LastName = "Gómez",
                            Name = "Lucía",
                            PasswordHash = "hashedpassword",
                            Phone = "1112223333",
                            Role = "User",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7075)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7076),
                            Email = "carlos@example.com",
                            LastName = "Ramírez",
                            Name = "Carlos",
                            PasswordHash = "hashedpassword",
                            Phone = "4445556666",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7076)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7077),
                            Email = "sofia@example.com",
                            LastName = "Fernández",
                            Name = "Sofía",
                            PasswordHash = "hashedpassword",
                            Phone = "7778889999",
                            Role = "User",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7078)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7079),
                            Email = "andres@example.com",
                            LastName = "Martínez",
                            Name = "Andrés",
                            PasswordHash = "hashedpassword",
                            Phone = "2223334444",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2025, 3, 15, 21, 42, 6, 627, DateTimeKind.Utc).AddTicks(7079)
                        });
                });

            modelBuilder.Entity("ReservationRoom", b =>
                {
                    b.HasOne("bungalowparadise_api.Models.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bungalowparadise_api.Models.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bungalowparadise_api.Models.CardDetail", b =>
                {
                    b.HasOne("bungalowparadise_api.Models.User", "User")
                        .WithOne("CardDetail")
                        .HasForeignKey("bungalowparadise_api.Models.CardDetail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Notification", b =>
                {
                    b.HasOne("bungalowparadise_api.Models.Reservation", "Reservation")
                        .WithMany("Notifications")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.PasswordReset", b =>
                {
                    b.HasOne("bungalowparadise_api.Models.User", "User")
                        .WithMany("PasswordResets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Payment", b =>
                {
                    b.HasOne("bungalowparadise_api.Models.Reservation", "Reservation")
                        .WithMany("Payments")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Reservation", b =>
                {
                    b.HasOne("bungalowparadise_api.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Review", b =>
                {
                    b.HasOne("bungalowparadise_api.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Reservation", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.User", b =>
                {
                    b.Navigation("CardDetail");

                    b.Navigation("PasswordResets");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
