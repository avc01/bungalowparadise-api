// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bungalowparadise_api.DbContext;

#nullable disable

namespace bungalowparadise_api.Migrations
{
    [DbContext(typeof(HotelDbContext))]
    [Migration("20250421194514_SeedNewMockDataForDemoToday")]
    partial class SeedNewMockDataForDemoToday
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ReservationRoom", b =>
                {
                    b.Property<int>("ReservationsId")
                        .HasColumnType("int");

                    b.Property<int>("RoomsId")
                        .HasColumnType("int");

                    b.HasKey("ReservationsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("ReservationRoom");

                    b.HasData(
                        new
                        {
                            ReservationsId = 7,
                            RoomsId = 13
                        },
                        new
                        {
                            ReservationsId = 8,
                            RoomsId = 14
                        },
                        new
                        {
                            ReservationsId = 8,
                            RoomsId = 20
                        },
                        new
                        {
                            ReservationsId = 9,
                            RoomsId = 15
                        });
                });

            modelBuilder.Entity("bungalowparadise_api.Models.CardDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardCode")
                        .HasColumnType("int");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("CardNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CardDetails");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            CardCode = 123,
                            CardHolderName = "Ana Morales",
                            CardNumber = 1234567890120001L,
                            ExpiredDate = new DateTime(2028, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9186),
                            UserId = 8
                        },
                        new
                        {
                            Id = 6,
                            CardCode = 321,
                            CardHolderName = "Luis Castro",
                            CardNumber = 1234567890120002L,
                            ExpiredDate = new DateTime(2027, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9192),
                            UserId = 9
                        },
                        new
                        {
                            Id = 7,
                            CardCode = 456,
                            CardHolderName = "Esteban Zamora",
                            CardNumber = 1234567890120003L,
                            ExpiredDate = new DateTime(2029, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9193),
                            UserId = 10
                        },
                        new
                        {
                            Id = 8,
                            CardCode = 654,
                            CardHolderName = "David Rojas",
                            CardNumber = 1234567890120004L,
                            ExpiredDate = new DateTime(2026, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9195),
                            UserId = 12
                        });
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("Unread");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.PasswordReset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ResetToken")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResetToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResets");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("Pending");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Amount = 180.0,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9141),
                            PaymentMethod = "American Express",
                            PaymentStatus = "Pending",
                            ReservationId = 7,
                            TransactionId = "TX000777"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 320.0,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9142),
                            PaymentMethod = "American Express",
                            PaymentStatus = "Pending",
                            ReservationId = 9,
                            TransactionId = "TX000888"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 320.0,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9143),
                            PaymentMethod = "American Express",
                            PaymentStatus = "Pending",
                            ReservationId = 8,
                            TransactionId = "TX000838"
                        });
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int>("NumberOfAdults")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfKids")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("Pending");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            CheckIn = new DateTime(2025, 4, 22, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9046),
                            CheckOut = new DateTime(2025, 4, 23, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9051),
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9052),
                            NumberOfAdults = 1,
                            NumberOfGuests = 1,
                            NumberOfKids = 0,
                            Status = "Confirmed",
                            UserId = 8
                        },
                        new
                        {
                            Id = 8,
                            CheckIn = new DateTime(2025, 4, 24, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9053),
                            CheckOut = new DateTime(2025, 4, 27, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9053),
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9054),
                            NumberOfAdults = 2,
                            NumberOfGuests = 3,
                            NumberOfKids = 1,
                            Status = "Confirmed",
                            UserId = 9
                        },
                        new
                        {
                            Id = 9,
                            CheckIn = new DateTime(2025, 4, 28, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9055),
                            CheckOut = new DateTime(2025, 5, 1, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9055),
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9056),
                            NumberOfAdults = 2,
                            NumberOfGuests = 2,
                            NumberOfKids = 0,
                            Status = "Confirmed",
                            UserId = 10
                        });
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            Comment = "Buen lugar para relajarse.",
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9164),
                            Rating = 4,
                            UserId = 8
                        },
                        new
                        {
                            Id = 7,
                            Comment = "Muy recomendado para vacaciones.",
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9165),
                            Rating = 5,
                            UserId = 9
                        },
                        new
                        {
                            Id = 8,
                            Comment = "Podría mejorar el servicio.",
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9166),
                            Rating = 3,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Bathrooms")
                        .HasColumnType("int");

                    b.Property<int>("Beds")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("GuestsPerRoom")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("Available");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id");

                    b.HasIndex("RoomNumber")
                        .IsUnique();

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 13,
                            Bathrooms = 1,
                            Beds = 2,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9008),
                            Description = "Habitación con vista a la montaña",
                            GuestsPerRoom = 2,
                            Name = "Mountain View Room",
                            Price = 180.0,
                            RoomNumber = "201",
                            Status = "Available",
                            Type = "Double",
                            UpdatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9008)
                        },
                        new
                        {
                            Id = 14,
                            Bathrooms = 1,
                            Beds = 1,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9010),
                            Description = "Individual con escritorio y buena iluminación",
                            GuestsPerRoom = 1,
                            Name = "Work Pod",
                            Price = 110.0,
                            RoomNumber = "202",
                            Status = "Available",
                            Type = "Single",
                            UpdatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9010)
                        },
                        new
                        {
                            Id = 15,
                            Bathrooms = 2,
                            Beds = 1,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9012),
                            Description = "Suite con terraza privada y bar",
                            GuestsPerRoom = 2,
                            Name = "Sunset Suite",
                            Price = 320.0,
                            RoomNumber = "203",
                            Status = "Available",
                            Type = "Suite",
                            UpdatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9012)
                        },
                        new
                        {
                            Id = 16,
                            Bathrooms = 1,
                            Beds = 2,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9014),
                            Description = "Moderna con acceso a piscina",
                            GuestsPerRoom = 2,
                            Name = "Poolside Double",
                            Price = 145.0,
                            RoomNumber = "204",
                            Status = "Available",
                            Type = "Double",
                            UpdatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9014)
                        },
                        new
                        {
                            Id = 17,
                            Bathrooms = 1,
                            Beds = 1,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9015),
                            Description = "Compacta y económica",
                            GuestsPerRoom = 1,
                            Name = "Traveler Basic",
                            Price = 95.0,
                            RoomNumber = "205",
                            Status = "Available",
                            Type = "Single",
                            UpdatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9016)
                        },
                        new
                        {
                            Id = 18,
                            Bathrooms = 1,
                            Beds = 2,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9017),
                            Description = "En remodelación con nueva decoración",
                            GuestsPerRoom = 2,
                            Name = "Renovation Suite",
                            Price = 160.0,
                            RoomNumber = "206",
                            Status = "Maintenance",
                            Type = "Double",
                            UpdatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9017)
                        },
                        new
                        {
                            Id = 19,
                            Bathrooms = 2,
                            Beds = 1,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9019),
                            Description = "Suite con minibar y jacuzzi",
                            GuestsPerRoom = 2,
                            Name = "Luxury Escape",
                            Price = 290.0,
                            RoomNumber = "207",
                            Status = "Available",
                            Type = "Suite",
                            UpdatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9019)
                        },
                        new
                        {
                            Id = 20,
                            Bathrooms = 1,
                            Beds = 2,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9020),
                            Description = "Ideal para familias pequeñas",
                            GuestsPerRoom = 3,
                            Name = "Family Room",
                            Price = 170.0,
                            RoomNumber = "208",
                            Status = "Available",
                            Type = "Double",
                            UpdatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(9020)
                        });
                });

            modelBuilder.Entity("bungalowparadise_api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("User");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(8886),
                            Email = "ana@example.com",
                            LastName = "Morales",
                            Name = "Ana",
                            PasswordHash = "$2b$12$pkJWEKnH.XsPx.coq8LDn.DR7CiOf92.Y0kJdoeggqP6qG..T8qDW",
                            Phone = "88888888",
                            Role = "User",
                            UpdatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(8887)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(8889),
                            Email = "luis@example.com",
                            LastName = "Castro",
                            Name = "Luis",
                            PasswordHash = "$2b$12$pkJWEKnH.XsPx.coq8LDn.DR7CiOf92.Y0kJdoeggqP6qG..T8qDW",
                            Phone = "77777777",
                            Role = "User",
                            UpdatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(8889)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(8890),
                            Email = "esteban@example.com",
                            LastName = "Zamora",
                            Name = "Esteban",
                            PasswordHash = "$2b$12$pkJWEKnH.XsPx.coq8LDn.DR7CiOf92.Y0kJdoeggqP6qG..T8qDW",
                            Phone = "66666666",
                            Role = "User",
                            UpdatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(8891)
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(8892),
                            Email = "valeria@example.com",
                            LastName = "Jiménez",
                            Name = "Valeria",
                            PasswordHash = "$2b$12$pkJWEKnH.XsPx.coq8LDn.DR7CiOf92.Y0kJdoeggqP6qG..T8qDW",
                            Phone = "99999999",
                            Role = "User",
                            UpdatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(8892)
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(8893),
                            Email = "david@example.com",
                            LastName = "Rojas",
                            Name = "David",
                            PasswordHash = "$2b$12$pkJWEKnH.XsPx.coq8LDn.DR7CiOf92.Y0kJdoeggqP6qG..T8qDW",
                            Phone = "55555555",
                            Role = "User",
                            UpdatedAt = new DateTime(2025, 4, 21, 19, 45, 13, 442, DateTimeKind.Utc).AddTicks(8894)
                        });
                });

            modelBuilder.Entity("ReservationRoom", b =>
                {
                    b.HasOne("bungalowparadise_api.Models.Reservation", null)
                        .WithMany()
                        .HasForeignKey("ReservationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bungalowparadise_api.Models.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("bungalowparadise_api.Models.CardDetail", b =>
                {
                    b.HasOne("bungalowparadise_api.Models.User", "User")
                        .WithOne("CardDetail")
                        .HasForeignKey("bungalowparadise_api.Models.CardDetail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Notification", b =>
                {
                    b.HasOne("bungalowparadise_api.Models.Reservation", "Reservation")
                        .WithMany("Notifications")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.PasswordReset", b =>
                {
                    b.HasOne("bungalowparadise_api.Models.User", "User")
                        .WithMany("PasswordResets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Payment", b =>
                {
                    b.HasOne("bungalowparadise_api.Models.Reservation", "Reservation")
                        .WithMany("Payments")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Reservation", b =>
                {
                    b.HasOne("bungalowparadise_api.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Review", b =>
                {
                    b.HasOne("bungalowparadise_api.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.Reservation", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("bungalowparadise_api.Models.User", b =>
                {
                    b.Navigation("CardDetail");

                    b.Navigation("PasswordResets");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
